import pandas as pd
from surprise import Dataset, Reader, KNNBasic
from surprise.model_selection import train_test_split
from surprise import accuracy
from flask import Flask, request, render_template

# Step 1: Data Collection
ratings_df = pd.read_csv('ratings.csv')  # Assuming ratings.csv contains movie ratings data
movies_df = pd.read_csv('movies.csv')    # Assuming movies.csv contains movie information

# Step 2: Data Preprocessing
ratings_df.dropna(inplace=True)  # Drop rows with missing values

# Step 3: User-Item Matrix
user_item_matrix = ratings_df.pivot(index='userId', columns='movieId', values='rating').fillna(0)

# Step 4: Collaborative Filtering
reader = Reader(rating_scale=(0.5, 5))  # Define rating scale
data = Dataset.load_from_df(ratings_df[['userId', 'movieId', 'rating']], reader)
trainset, testset = train_test_split(data, test_size=0.2, random_state=42)

# Use User-Based Collaborative Filtering
algo = KNNBasic(sim_options={'user_based': True})
algo.fit(trainset)

# Step 5: Model Evaluation
predictions = algo.test(testset)
accuracy.rmse(predictions)

# Step 6: Top-N Recommendations
def get_top_n_recommendations(predictions, n=5):
    top_n = {}
    for uid, iid, true_r, est, _ in predictions:
        if uid not in top_n:
            top_n[uid] = []
        top_n[uid].append((iid, est))
    
    for uid, user_ratings in top_n.items():
        user_ratings.sort(key=lambda x: x[1], reverse=True)
        top_n[uid] = [iid for iid, _ in user_ratings[:n]]
    
    return top_n

user_predictions = algo.test(trainset.build_anti_testset())
top_n_recommendations = get_top_n_recommendations(user_predictions, n=5)

# Step 7: Interactive Interface using Flask
app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/recommend', methods=['POST'])
def recommend():
    user_id = int(request.form['user_id'])
    recommendations = top_n_recommendations.get(user_id, [])
    recommended_movies = [movies_df[movies_df['movieId'] == movie_id]['title'].values[0] for movie_id in recommendations]
    return render_template('recommendations.html', recommendations=recommended_movies)

if __name__ == '__main__':
    app.run(debug=True)
